---
import Select from '@astrojs/starlight/components/Select.astro';
import type { Props } from '@astrojs/starlight/props';
---

<starlight-theme-select>
	{/* TODO: Can we give this select a width that works well for each language’s strings? */}
	<Select
		icon="sun"
		label="Light"
		value="light"
		options={[
			{ label: "Dark", selected: false, value: 'dark' },
			{ label: "Light", selected: true, value: 'light' },
		]}
		width="6.25em"
	/>
</starlight-theme-select>

{/* Inlined to avoid FOUC. Uses global scope from `ThemeProvider.astro` */}
<script is:inline>
	StarlightThemeProvider.updatePickers();

	/** Key in `localStorage` to store color theme preference at. */
	const storageKey = 'starlight-theme';

	/** Get a typesafe theme string from any JS value (unknown values are coerced to `'light'`). */
	const parseTheme = (theme) =>
		theme === 'dark' || theme === 'light' ? theme : 'light';

	/** Store the user’s preference in `localStorage`. */
	function storeTheme(theme) {
		if (typeof localStorage !== 'undefined') {
			localStorage.setItem(storageKey, theme === 'light' || theme === 'dark' ? theme : '');
		}
	}

	/** Update select menu UI, document theme, and local storage state. */
	function onThemeChange(theme) {
		StarlightThemeProvider.updatePickers(theme);
		document.documentElement.dataset.theme = theme;
		storeTheme(theme);
	}

	class StarlightThemeSelect extends HTMLElement {
		constructor() {
			super();
			onThemeChange('light');
			this.querySelector('select')?.addEventListener('change', (e) => {
				if (e.currentTarget instanceof HTMLSelectElement) {
					onThemeChange(parseTheme(e.currentTarget.value));
				}
			});
		}
	}
	customElements.define('starlight-theme-select', StarlightThemeSelect);
</script>
